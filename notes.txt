Here are the assignment instructions, to be edited as worked:

To create:
/server
    front-end:
    x    /public folder
    x    HTML
        x    inputs
        x    table build
            x    columns
            x        task
            x        complete button
            x        delete button

            /styles
                CSS
                    overall fancy
                    x    background color
                        font-family & size

                    text &/or background color styling for task-complete 
                        (toggle/switch?)
                        needs to connect to logic, so that switched styling is (permanent)
            /scripts
                clientjs
                x    POST function
                x        method: 'POST',
                x    GET function
                x        method: 'GET',
                    UPDATE function
                        method: 'PUT',
                    DELETE function
                        method: 'DELETE',
                x    render function
                x        empty table
                x        append <tr>
                x            include
                x            data-id="" to render <tr>
                x            complete button
                x                also added un-complete button
                x            delete button



    x        /vendors
    x            jquery
        
    back-end:
    x    create server
        x    create to_do table
            x    columns:
                x    id
                x    task
                x    done(true/false; start false) (update) (boolean)
                x    add test data to table
                x    add sql query to doc here

        serverjs
    x    POST function
    x        method: 'POST',
    x    GET function
    x        method: 'GET',
    x    UPDATE function
    x        method: 'PUT',
    x    DELETE function
    x        method: 'DELETE',
    x    /modules
    x        pooljs
    x    /routes
FINISH!!!!!!!!            routejs
    other/support docs:
    x    download express/bP/pg
    x    notes
    x    database.sql
    x    gitignore



The To-Do App
You are going to create a 'TO DO' application. This type 
of application is very common to tackle when learning a new 
language, which makes it extremely valuable to work through for 
the first time. Chances are good that at some point in your career 
you will tackle this again while learning another language.

Here are the specific components for the challenge:

-----DONE!!!!!-----
Create a front end experience that allows a user to create a Task.
When the Task is created, it should be stored inside of a database (SQL)
Whenever a Task is created the front end should refresh to show all tasks 
that need to be completed.

Each Task should have an option to 'Complete' or 'Delete'.
When a Task is complete, its visual representation should change on the 
front end. For example, the background of the task container could change 
from gray to green. The complete option should be 'checked off'. Each of these 
are accomplished in CSS, but will need to hook into logic to know whether or 
not the task is complete.

Whether or not a Task is complete should also be stored in the database.
Deleting a Task should remove it both from the front end as well as the Database.


Styling
Use CSS styling to move the aesthetic of the page beyond the vanilla HTML look:
background color of the page
font family and size
text color & or background color of tasks to show whether or not they have 
been completed

-----GOOD ADVICE!!!!---- forward planning was super helpful to keep me oriented
Approach
We would recommend you spend some time thinking about how to approach 
this problem. Think through all the logic that will be needed prior to writing 
any code. Take your time, relax, remember that impostor syndrome is real, and 
that you are capable of knocking this out of the park!

------DONE!!!!----
Create a Database
Be sure to create a new database through Postico. Use the name 
weekend-to-do-app. You will need to use this name in your 
database connection configuration on your server.

-----DONE!!!!-----
Database Structure
Please include a database.sql text file in your repo that 
includes all of your CREATE TABLE queries. This is so we can re-create 
your database while testing your app.




Stretch Goals
For each of your strech goals, you will be practicing git branching. Please 
refer to the branching notes for a reminder on commands. Each branch will be 
merged into main using --no-ff. This will allow us to see that you branched 
your feature when you turn in your code.


feature-styling-bootstrap

 Add Bootstrap to the front end and style it up!
Buttons -- make the creation buttons and completion buttons green and the delete red.
Inputs -- make your text inputs styled in the bootstrap way
Responsive -- make your app responsive to different screen sizes -- check out 
the Layout section


feature-confirm-delete

 In whatever fashion you would like, create an 'are you sure: yes / no' option 
 when deleting a task.
Some styled options are Bootstrap Modal or Sweet Alerts: Use the CDN option.


feature-ordering-task-query

 Research Query Params to have the request reverse the order of the 
 returned todos.


feature-time-completed

 Add the ability to record when a task was completed. Show the completed 
 date on the frontend in a pretty format.